@page "/kitchen"
@inject OrderService OrderService
@using Experiment21.Models;
@using Experiment21.Services;

<style>
    .toggle-button {
        font-size: 0.6em;
        padding: 5px 10px;
    }

    .order-card {
        border: 1px solid #ccc;
        padding: 10px;
        margin-bottom: 10px;
    }

    .button-spacing {
        margin-right: 10px;
    }
</style>

<h1>Kitchen Orders</h1>

<h2>Received <button class="toggle-button" @onclick="() => showReceivedOrders = !showReceivedOrders">@showReceivedButtonText</button></h2>
@if (showReceivedOrders)
{
    foreach (var order in orders.Where(o => o.Status == OrderStatus.Received))
    {
        <div class="order-card">
            <p>
                Order ID: @order.Id <br />
                Customer name: @order.CustomerName <br />
                Status: @FormatStatus(order.Status) <br />
                <button class="button-spacing"  @onclick="() => ToggleProductList(order.Id)">@(productListShown[order.Id] ? "Hide Products" : "Show Products")</button>
                @if (productListShown[order.Id])
                {
                    foreach (var orderDetail in order.OrderDetails)
                    {
                    <p>@orderDetail.Quantity x @orderDetail.Product.Name</p>
                    }
                }

            <button @onclick="() => PrepareOrder(order)">Start Preparing</button>
            </p>
        </div>
    }
}

<h2>Being Prepared <button class="toggle-button" @onclick="() => showBeingPreparedOrders = !showBeingPreparedOrders">@showBeingPreparedButtonText</button></h2>
@if (showBeingPreparedOrders)
{
    foreach (var order in orders.Where(o => o.Status == OrderStatus.BeingPrepared))
    {
        <div class="order-card">
            <p>
                Order ID: @order.Id <br />
                Customer name: @order.CustomerName <br />
                Status: @FormatStatus(order.Status) <br />
                <button class="button-spacing" @onclick="() => ToggleProductList(order.Id)">@(productListShown[order.Id] ? "Hide Products" : "Show Products")</button>
                @if (productListShown[order.Id])
                {
                    foreach (var orderDetail in order.OrderDetails)
                    {
                    <p>@orderDetail.Quantity x @orderDetail.Product.Name</p>
                    }
                }

            <button @onclick="() => CompleteOrder(order)">Ready for Pickup</button>
            </p>
        </div>
    }
}

<h2>Ready For Pickup <button class="toggle-button" @onclick="() => showReadyForPickupOrders = !showReadyForPickupOrders">@showReadyForPickupButtonText</button></h2>
@if (showReadyForPickupOrders)
{
    foreach (var order in orders.Where(o => o.Status == OrderStatus.ReadyForPickup))
    {
        <div class="order-card">
            <p>
                Order ID: @order.Id <br />
                Customer name: @order.CustomerName <br />
                Status: @FormatStatus(order.Status) <br />
                <button class="button-spacing" @onclick="() => ToggleProductList(order.Id)">@(productListShown[order.Id] ? "Hide Products" : "Show Products")</button>
                @if (productListShown[order.Id])
                {
                    foreach (var orderDetail in order.OrderDetails)
                    {
                    <p>@orderDetail.Quantity x @orderDetail.Product.Name</p>
                    }
                }
            </p>
        </div>
    }
}

@code {
    private List<Order> orders = new();
    private Dictionary<int, bool> productListShown = new();

    private bool showReceivedOrders = true;
    private bool showBeingPreparedOrders = true;
    private bool showReadyForPickupOrders = true;

    private string showReceivedButtonText => showReceivedOrders ? "Hide" : "Show";
    private string showBeingPreparedButtonText => showBeingPreparedOrders ? "Hide" : "Show";
    private string showReadyForPickupButtonText => showReadyForPickupOrders ? "Hide" : "Show";

    protected override async Task OnInitializedAsync()
    {
        await GetOrders();
    }

    private async Task GetOrders()
    {
        orders = await OrderService.GetOrdersAsync();
        foreach (var order in orders)
        {
            if (!productListShown.ContainsKey(order.Id))
            {
                productListShown.Add(order.Id, false);
            }
        }
    }

    private void ToggleProductList(int orderId)
    {
        productListShown[orderId] = !productListShown[orderId];
    }

    private async Task PrepareOrder(Order order)
    {
        order.Status = OrderStatus.BeingPrepared;
        await OrderService.UpdateOrderAsync(order);
        await GetOrders();
    }

    private async Task CompleteOrder(Order order)
    {
        order.Status = OrderStatus.ReadyForPickup;
        await OrderService.UpdateOrderAsync(order);
        await GetOrders();
    }

    private string FormatStatus(OrderStatus status)
    {
        switch (status)
        {
            case OrderStatus.Received:
                return "Received";
            case OrderStatus.BeingPrepared:
                return "Being prepared";
            case OrderStatus.ReadyForPickup:
                return "Ready for pickup";
            default:
                return "Unknown status";
        }
    }
}
