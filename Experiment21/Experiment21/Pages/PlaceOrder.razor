@page "/placeorder"
@inject IJSRuntime JSRuntime
@inject ProductService ProductService
@inject OrderService OrderService
@using Experiment21.Models;
@using Experiment21.Services;
@using Microsoft.AspNetCore.Components.Forms

<style>
    .stacked-form {
        display: flex;
        flex-direction: column;
    }

        .stacked-form .grouped-div {
            margin-bottom: 10px;
        }

    .total-cost {
        font-size: 1.5em;
        font-weight: bold;
        color: #4CAF50; /* Green color */
        background-color: #F0F0F0; /* Light gray background */
        padding-top: 5px;
        text-align: left;
    }

    .shipping-cost {
        font-size: 0.9em;
        font-weight: normal;
        color: #4CAF50; /* Green color */
        background-color: #F0F0F0; /* Light gray background */
        padding-bottom: 5px;
        text-align: left;
    }

    .field {
        margin-bottom: 10px;
    }
</style>

<h1>Place orders</h1>

<EditForm Model="newOrder" OnValidSubmit="PlaceNewOrder" class="stacked-form">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="field">
        <InputText id="customerName" @bind-Value="newOrder.CustomerName" placeholder="Customer Name" />
        <ValidationMessage For="@(() => newOrder.CustomerName)" />
    </div>

    <div class="field">
        <InputText id="address" @bind-Value="newOrder.Address" placeholder="Address" />
        <ValidationMessage For="@(() => newOrder.Address)" />
    </div>

    <div class="field">
        <InputText id="phoneNumber" @bind-Value="newOrder.PhoneNumber" placeholder="Phone Number" />
        <ValidationMessage For="@(() => newOrder.PhoneNumber)" />
    </div>

    @foreach (var product in products)
    {
        <div class="field">
            @product.Product.Name (@product.Product.Price.ToString("C"))
            <InputNumber @bind-Value="product.Quantity" min="0" />
        </div>
    }

    <div class="field">
        <InputText id="notes" @bind-Value="newOrder.Notes" placeholder="Order Notes" />
        <ValidationMessage For="@(() => newOrder.Notes)" />
    </div>

    <div class="grouped-div">
        <div class="total-cost">
            Total Cost: @TotalCost.ToString("C")
        </div>
        <div class="shipping-cost">
            (including shipping: @(ProductCost < 80M ? 15M.ToString("C") : "free"))
        </div>
    </div>

    <div class="field">
        <button type="submit">Place Order</button>
    </div>
</EditForm>

@code {
    private Order newOrder = new();
    private List<ProductViewModel> products = new();

    protected override async Task OnInitializedAsync()
    {
        var productList = await ProductService.GetProductsAsync();
        products = productList.Select(p => new ProductViewModel { Product = p }).ToList();
    }

    private decimal TotalCost => ProductCost + (ProductCost < 80M ? 15M : 0M);  // Add shipping cost if products cost less than 80 PLN

    private decimal ProductCost => products.Sum(p => p.Quantity * p.Product.Price);

    private async Task PlaceNewOrder()
    {
        newOrder.OrderDetails = new List<OrderDetail>();

        foreach (var productVM in products.Where(p => p.Quantity > 0))
        {
            newOrder.OrderDetails.Add(new OrderDetail
                {
                    ProductId = productVM.Product.Id,
                    Quantity = productVM.Quantity
                });
        }

        newOrder.TotalCost = TotalCost;

        if (newOrder.OrderDetails.Any())
        {
            await OrderService.CreateOrderAsync(newOrder);

            await JSRuntime.InvokeVoidAsync("alert", "Order placed successfully!");

            newOrder = new Order();

            // Reset all the quantity selectors
            foreach (var productVM in products)
            {
                productVM.Quantity = 0;
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "No product has been selected!");
        }
    }

    private class ProductViewModel
    {
        public Product Product { get; set; } = default!;
        public int Quantity { get; set; }
    }
}
