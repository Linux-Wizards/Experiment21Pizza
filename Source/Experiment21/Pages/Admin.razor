@page "/admin"
@attribute [Authorize(Roles = "Administrator")]
@inject UserManager<IdentityUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

<style>
    .user-container {
        border: 1px solid #000;
        padding: 10px;
        margin-bottom: 20px;
        border-radius: 10px;
    }

        .user-container h4 {
            margin-bottom: 5px;
        }

        .user-container button {
            margin-top: -5px;
        }
</style>

<h1>Admin page</h1>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    foreach (var user in users)
    {
        <div class="user-container">
            <h4>User: @user.UserName</h4>
            <button @onclick="() => ToggleUserRolesVisibility(user)">Show Roles</button>
            <button @onclick="() => ConfirmAndRemoveUser(user)">Remove User</button>
            @if (showRoles[user.Id])
            {
                foreach (var role in allRoles)
                {
                    bool isChecked = userRoles[user.Id].Contains(role.Name);
                    <div>
                        <input type="checkbox" checked="@isChecked" @onchange="@(e => ToggleRole(user, role, e))" /> @role.Name
                    </div>
                }
            }
        </div>
    }
}

@code {
    private List<IdentityUser> users = default!;
    private Dictionary<string, List<string>> userRoles = new();
    private Dictionary<string, bool> showRoles = new();
    private List<IdentityRole> allRoles = default!;

    protected override async Task OnInitializedAsync()
    {
        users = await UserManager.Users.ToListAsync();
        allRoles = await RoleManager.Roles.ToListAsync();

        foreach (var user in users)
        {
            userRoles[user.Id] = (await UserManager.GetRolesAsync(user)).ToList();
            showRoles[user.Id] = false;
        }
    }

    void ToggleUserRolesVisibility(IdentityUser user)
    {
        showRoles[user.Id] = !showRoles[user.Id];
    }

    async Task ToggleRole(IdentityUser user, IdentityRole role, ChangeEventArgs e)
    {
        bool isAddingRole = (bool)e.Value;
        if (isAddingRole)
        {
            await UserManager.AddToRoleAsync(user, role.Name);
        }
        else
        {
            await UserManager.RemoveFromRoleAsync(user, role.Name);
        }

        // Update roles for the user
        userRoles[user.Id] = (await UserManager.GetRolesAsync(user)).ToList();
    }

    async Task ConfirmAndRemoveUser(IdentityUser user)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete user {user.UserName}?");
        if (confirmed)
        {
            var result = await UserManager.DeleteAsync(user);
            if (result.Succeeded)
            {
                users.Remove(user);
            }
            else
            {
                Console.WriteLine("Error occurred while deleting user.");
            }
        }
    }
}
